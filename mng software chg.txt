Mng Software Chg
Main Success Scenario:
  1. "Mng Chg" 
  2. Understand Chg
  3. "Determine Chg Schedule" 
  4. "Apply Chg"


Mng Chg
Main Success Scenario:
  1. "Mng Software Choice" use case
  2. "Mng Software Chg" use case
  3. "Mng Code Chg" use case


Mng Software Choice
Preconditions:
  - Just the selection of what software to use
  - chg versioning not done for this
Main Success Scenario:
  1. [xxx: need to fill in] 
  2. "Mng Hardware Chg" use case


Mng Software Config
Preconditions:
  - Just config of software
  - If code changes are done, they are automatically done by the software config
  - chg versioning not done for this
Main Success Scenario:
  1. Set values in software UI
  2. "Mng Hardware Chg" use case


Mng Hardware Chg
Preconditions:
  - Could be first env setup or change to existing env
Main Success Scenario:
  1. RAM Chg
  2. Drive Chg
  3. Conn Chg
  4. CPU Chg
  5. Software Install Location Chg


Mng Code Chg
Preconditions:
  - Code chg saved in versioning software before or after chg to an env
  - Use feature flags to provide more control over when code will be used
  - Schedule refactoring of code when it gets too confusing
Main Success Scenario:
  1. Store code changes in versioning software
  2. "Branch Code" use case


Branch Code
Preconditions:
  - Branching may cause more than one dev to work on same code
  - Branches need to merge at some point, that can be complex
  - Allows for clearly different paths when not clear on direction to take
Main Success Scenario:
  1. [xxx: need to fill in]


Determine Chg Schedule
Preconditions:
  - Chg for prod env
Main Success Scenario:
  1. Determine importance
  2. Determine impact
  3. time to understand chg
  4. time to develop & test chg
  5. time to apply chg


Apply Chg
Preconditions: 
  - uses pre-defined deployment process, see "Define Deployment Process" use case
Main Success Scenario:
  1. "Apply Urgent Chg" use case
  2. "Apply Non-Urgent Chg" use case


Apply Urgent Chg
Preconditions:
  -Chg fixes issue that needs quick resolution
  -Short time window may increase risk
  - Use feature flags to provide more control over when code will be used
Main Success Scenario:
  1. Notify impacted audiences of chg ahead of chg period
  2. Apply during agreed period
  3. Notify impacted audiences after chg completed


Apply Non-Urgent Chg
Preconditions:
  - Chg fixes issues that does not need a quick resolution
  - Chg applied to prod
  - Use feature flags to provide more control over when code will be used
Main Success Scenario:
  1. Notify impacted audiences of chg ahead of chg period
  2. Apply during regularly scheduled chg period
  3. Notify impacted audiences after chg completed


Define Deployment Process
Note:
  - Guidance from https://en.wikipedia.org/wiki/Continuous_integration
  - Guidance from https://en.wikipedia.org/wiki/Continuous_integration
  - Ex of CI and/or CD software: Jenkins, Travis
  - CI & CD benefits
    - easier to test smaller code chg
    - shorter and more frequent deployments
    - less likely to have 2 or more devs working on same code
    - chg deployed to prod sooner
    - smaller changes with feature flags can step a larger change in over multiple deployments
Preconditions:
  - Process defined for all chg types
  - Process documented
  - Focused on software, software config, and code chg. Not focused on data chg. 
  - Use feature flags to provide more control over when code will be used
Main Success Scenario:
  1. Define steps
  2. Define automated steps 
  3. Discern between urgent and non-urgent chg
  4. Define schedule to apply changes to test & prod
  5. Define versioning software & rules
  6. Define backup software, rules, & processes
  7. define access to code, software, and env
  8. Define software flow
  9. Define software down periods
 
  
  


