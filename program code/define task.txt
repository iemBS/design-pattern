Define Task
Note:
  -A task here is refering to a step in a process that is within code 
Main Success Scenario:
  x. "Define Task Name"
  x. "Define Possible Run Status"
  x. "Define Task Status"
  x. "Define Task Run"
  x. "Store Task Run Data"
  x. xxx:fill in 
  x. "Config Task"
  
  
Store Task Run Data
Main Success Scenario:
  1. Required attributes for each entry stored
    TASK_STATUS_ID
    TASK_RUN_STATUS_ID
    TASK_RUN_ID
    PROCESS_RUN_ID
    TASK_ID or TASK_NAME
    TASK_RUN_START_TIME or TASK_RUN_END_TIME
    TASK_TRACK_LOCATION
    
  
Define Task Run
Main Success Scenario:
  1. "Define Task Run Status"
  2. "Define Task Run Start and End Time"
  x. xxx:fill in
  
  
Define Task Run Start and End Time
Main Success Scenario:
  1. Format time as YYYY-MM-DDTHH:MM:SS+XX:XX
    ex: 1997-07-16T19:20:30+01:00
  2. End 
Alternatives:
  1a. Include milliseconds
    1a1. Format time as YYYY-MM-DDTHH:MM:SS.FFF+XX:XX
      ex: 1997-07-16T19:20:30.435+01:00
    1a2. Go to step 2
  
  
Define Task Run Status
Main Success Scenario:
  1. Define a config location outside of the Task code where the allowed run status values are set
  2. Only allow values of RUNNING, FAILED, SUCCESS
  3. End 
  
  
Define Task Status
Pre-Conditions:
  -For a task to own its own status, it needs to be controlled by the task
Main Success Scenario:
  1. Define a config location outside of the Task code where the status is set
  2. Only allow values of 1 (enabled) or 0 (disabled). 
  3. End 
  

Define Task Name 
Main Success Scenario:
  x. xxx:fill in 
  

Define Possible Run Status
Main Success Scenario:
  x. xxx:fill in 
  
  
Config Task
Main Success Scenario:
  1. "Config Task Status"
  2. "Config Task Run Status"
  x. xxx:fill in
  

Config Task Status 
Main Success Scenario:
  1. Set "TASK_STATUS" to "ENABLED" or "DISABLED"
  2. End 
  

Config Task Run Status
Main Success Scenario:
  1. Set "TASK_RUN_STATUS_LIST" to "RUNNING,FAILED,SUCCESS"
  2. End 
  
  

-Task Run ID of Parent Task passed to Child Task
  -Parent and Child tasks are action objects like a relational DB procedure, glue job, lambda function, Python method, etc
-Task Run Start Time and Task Name noted 
  -Time is to a unit where we will not have to quess what is happening with the time
-Sub-Task Run Start Time and Sub-Task Name noted
  -Time is to a unit where we will not have to quess what is happening with the time
-Sub-Task Run End Time and Su-Task Name noted
  -Time is to a unit where we will not have to quess what is happening with the time
-Task Run End Time and Task Name noted
  -Time is to a unit where we will not have to quess what is happening with the time


Minimize Tracking Code with each Task Creation
Pre-Conditions:
  -Task Name, Task Run Start Time, Task Run End Time, Task Run Final Status, and Task Status is determined by a layer outside of a task
  -Custom code within the task is NOT used to provide the Task Name, Task Run Start Time, Task Run End Time, Task Run Final Status, and Task Status
  -Task Status exists in a config location and not in code. 
    -Possible Task Status values are configured in one location and stored in the TASK_STATUS_LIST with columns of TASK_STATUS_ID and TASK_STATUS_NAME. 
      -0, DISABLED
      -1, ENABLED
    -The TASK_STATUS_ID property for a TASK in the config location holds the currently configured status. Using TASK_STATUS_ID instead of TASK_STATUS_NAME as the TASK property that defines if a task is enabled or disabled reduces the chance of noting an incorrect task status
  -A TASK_RUN pulls the TASK_STATUS_ID from the config location to know if it is enabled or disabled
  -No matter what point the task run exits the task code, the accurate Task Run End Time is seen by the outside layer
    -That time is stored in the TASK_RUN_END_TIME property of a TASK_RUN
  -Same property that defines the name of the action object is the same property that holds the Task Name
  -A Sub-Task is a block of code within a Task (aka action object)
  -The simplist and same bit of code is used to mark the start and end of a Sub-Task. 
    -A period will be appended to the parent task name. Then the specified sub-task name will be appended to that. So, you have [PARENT_TASK_NAME].[SUB_TASK_NAME] as the full sub-task name.
    -That call needs to take in TASK_RUN_ID of the current task
Main Success Scenario:
  1. xxx:fill in
  
  
**Task Example**
-C#, Java, etc method call
-import file
-export file
-copy file
-xxx:fill in
