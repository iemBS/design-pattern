Abbreviations
-YoY = Year over Year = Compare number on a date to the number on the same date a year ago 
-MoM = Month over Month = Compare number on a date to the number on the same date a month ago
-WoW = Week over Week = Compare number on a day to the number on the same day a week ago

**TASK MEASURES**

Contributing Non-Measure (an attribute):
<>TASK_ID = Uniquely identifies the task 
<>PROCESS_RUN_ID = Uniquely identifies a run of a group of tasks
<>TASK_RUN_START_TIME = Start time of a specific run of a task
<>TASK_RUN_END_TIME = End time of a specific run of a task
<>TASK_DURATION_TIME_UNIT = Time unit to use for task run duration
<>TASK_RUN_ERROR = Error that occurred for a specific run of a task
<>TASK_RUN_STATUS = Has values of RUNNING, FAILED, SUCCEEDED. 
<>TASK_ENABLED_STATE = Indicates if task is able to run
<>PROCESS_TASK_ORDER = Provides a number for a task to indicate the excution order of the tasks within the process
<>TASK_DURATION_LIMIT = xxx

Measure Hierarchy:
<>TASK_RUN_RAM_USAGE
<>TASK_RUN_CPU_USAGE
<>TASK_RUN_DSK_USAGE
<>TASK_RUN_RECORD_COUNT
<>TASK_RUN_DATA_VOLUME_MB
<>TASK_RAM_USAGE_LIMIT
<><>TASK_DISTINCT_COUNT = DISTINCT_COUNT(TASK_ID) = Distinct count of tasks regardless of task to process relation
<><>TASK_PROCESS_DISTINCT_COUNT = DISTINCT_COUNT(PROCESS_RUN_ID) GROUP BY TASK_ID = # of processes using specific task
<><>PROCESS_RUN_TASK_COUNT = COUNT(PROCESS_RUN_ID) GROUP BY PROCESS_RUN_ID = # of tasks executed in specific process run
<><>TASK_RUN_COUNT = COUNT(TASK_ID) GROUP BY TASK_ID = Run count of task regardless of how many processes use the task
<><>PROCESS_TASK_RUN_COUNT = COUNT(TASK_ID) GROUP BY TASK_ID,PROCESS_RUN_ID = Run count for a task for process
<><>TASK_RUN_ERROR_COUNT = COUNT(PROCESS_RUN_ID) WHERE TASK_RUN_ERROR EXISTS
<><>PROCESS_TASK_RUN_DURATION = TASK_RUN_END_TIME - TASK_RUN_START_TIME GROUP BY PROCESS_RUN_ID
<><>PROCESS_TASK_RUN_DURATION_MIN = MIN(PROCESS_TASK_RUN_DURATION)
<><>PROCESS_TASK_DURATION_MAX = MAX(PROCESS_TASK_RUN_DURATION)
<><><>PROCESS_RUN_DURATION = SUM(PROCESS_TASK_RUN_DURATION) GROUP BY PROCESS_RUN_ID
*<><>TASK_RUN_COMPLETION_STATUS = where TASK_RUN_END_TIME not exist or TASK_RUN_DURATION is 0
<><>TASK_RUN_OVERLAP_STATUS = where TASK_1_RUN_END_TIME > TASK_2_RUN_START_TIME WHERE (PROCESS_TASK_1_ORDER = PROCESS_TASK_2_ORDER-1) GROUP BY PROCESS_RUN_ID
<><>TASK_RUN_DURATION_LIMIT_EXCEEDED_STATUS = where PROCESS_TASK_RUN_DURATION > TASK_DURATION_LIMIT
<><>AVG_TASK_RECORD_COUNT = SUM(TASK_RUN_RECORD_COUNT) / TASK_RUN_COUNT = Avg task count regardless of task to process relation
<><>AVG_TASK_DATA_VOLUME_MB = SUM(TASK_RUN_DATA_VOLUME_MB) / TASK_RUN_COUNT
<><><>AVG_RAM_USAGE = SUM(TASK_RUN_RAM_USAGE) / TASK_RUN_COUNT
<><><>TASK_COMPLETE_COUNT = COUNT(PROCESS_RUN_ID where TASK_RUN_COMPLETION_STATUS is 1)
<><><>AVG_TASK_DURATION = SUM(TASK_DURATION) / TASK_COUNT
<><><>TASK_RECORD_COUNT_HIGH = where TASK_RECORD_COUNT > AVG_TASK_RECORD_COUNT
<><><>TASK_DATA_VOLUME_MB_HIGH = = where TASK_DATA_VOLUME_MB > AVG_TASK_DATA_VOLUME_MB
<><><>TASK_ERROR_PCT = TASK_ERROR_COUNT / TASK_COUNT
<><><><>TASK_COMPLETION_PCT = TASK_COMPLETE_COUNT / TASK_COUNT
<><><><>TASK_SLOW = where TASK_DURATION > AVG_TASK_DURATION
<><><><>TASK_FAST = where TASK_DURATION < AVG_TASK_DURATION
<><><><><>AVG_TASK_COMPLETION_PCT = SUM(TASK_COMPLETION_PCT) / # of times the TASK_COMPLETION_PCT was recorded 

**SOFTWARE CODE MEASURES**

Measure Hierarchy:
<>METHOD_COUNT
<>CLASS_COUNT
<>PROPERTY_COUNT
<>VARIABLE_COUNT 
<>METHOD_LINE_COUNT
<>METHOD_CALL_COUNT = # of times a method was called from all other methods
<><>AVG_METHOD_LINE_COUNT
<>xxx:fill in

**HARDWARE MEASURES**

Contributing Non-Measure (an attribute):
<>RAM_USAGE
<>CPU_USAGE
<>DSK_USAGE

Measure Hierarchy:
<>RAM_USAGE_AVG = AVG(RAM_USAGE)
<>CPU_USAGE_AVG = AVG(CPU_USAGE)
<>DSK_USAGE_AVG = AVG(DSK_USAGE)
xxx:fill in


**DATA CHANGE MEASURES**
Measure Hierarchy:
<>RECORD_INSERT_COUNT
<>
xxx:fill in

**DATA QUALITY MEASURES**
Measure Hierarchy:
<>FIELD_DISTINCT_VALUE_COUNT
<>FIELD_VALUE_COUNT
<><>FIELD_PERCENT_DISTINCT = (FIELD_DISTINCT_VALUE_COUNT/FIELD_VALUE_COUNT) x 100
xxx:fill in

**LOG MEASURES**
Contributing Non-Measure (an attribute):
<>INGEST_TIME
<>LOG_ENTRY_CREATE_TIME

Measure Hierarchy:
<>INGEST_DURATION = INGEST_TIME - LOG_ENTRY_CREATE_TIME
<><>AVG_INGEST_DURATION = AVG(INGEST_DURATION)
<><>MIN_INGEST_DURATION = MIN(INGEST_DURATION)
<><>MAX_INGEST_DURATION = MAX(INGEST_DURATION)


Define Measure
Main Success Scenario:
  1. "Define Reporting Goal"
  2. "Define Metric Role in Reporting Goal"
  3. "Define Metric Audience"
  4. "Define Min Data Quality for Metric"
  5. "Define Metric Business Logic"
  6. "Define Metric Technical Logic" 
  7. "Define Supporting Detail for Metric"
  
  
Define Reporting Goal
Main Success Scenario:
  1. xxx:fill in
  
  
Define Metric Role in Reporting Goal
Define Reporting Goal
Main Success Scenario:
  1. xxx:fill in
  
  
Define Metric Audience
Main Success Scenario:
  1. What motivates the audience to use the metric?
  2. Does the audiance understand how to make the metric value better?
  
  
Define Min Data Quality for Metric
Main Success Scenario:
  1. xxx:fill in
  
  
Define Metric Business Logic
Main Success Scenario:
  1. "Define Metric Time Attribute"
  2. xxx:fill in
  

Define Metric Technical Logic
Main Success Scenario:
  1. xxx:fill in

  
Define Metric Time Attribute
Main Success Scenario:
  1. xxx:fill in
  
  
Define Supporting Detail for Metric
Main Success Scenario:
  1. xxx:fill in
  

Define Finance Metric
Note:
  -guidance @ 
    -https://www.investopedia.com/financial-edge/0910/6-basic-financial-ratios-and-what-they-tell-you.aspx
Main Success Scenario:
  1. xxx:fill in
  
  
Define Index 
Note
 -Most commonly used simple index numbers are price, quantity, and value.
 -An index can incorporate several factors into a single metric 
Main Success Scenario:
  1. xxx:fill in
  
  
Categorize Measure
Main Success Scenario:
  1. xxx:fill in
  
  
**Chart attribute**
<># of variables
<>min & max value per variable 
<><>set vs dynamic
<>legend
<>variable label
<>variable unit
<>value display period
<>title
<>dynamic vs scheduled refresh vs on-demand refresh

**Chart quality**
<>xxx

  
**Chart type**
-chart references
--https://support.microsoft.com/en-us/office/available-chart-types-in-office-a6187218-807e-4103-9e0a-27cdb19afb90
--https://support.google.com/docs/answer/190718?hl=en#zippy=
--https://flowingdata.com/chart-types/
--https://en.wikipedia.org/wiki/Chart
--https://chartio.com/learn/charts/essential-chart-types-for-data-visualization/
-https://blog.hubspot.com/marketing/types-of-graphs-for-data-visualization
<>Line 
<>Bar 
<><>Clustered 
<><><>3-D
<><><>2-D
<><>Stacked 
<><><>3-D
<><><>2-D
<>Pie
<><><>3-D
<><><>2-D
<>Donut
<>Area
<>Funnel
<>Column
<><>Waterfall
<>Stock
<>Radar
<>Box and Whisker/Candlestick
<>Histogram
<>Sunburst
<>Surface
<>Map
<><>Density 
<><>Tree 
<>Scatter Plot
<>Gantt 
<>Bubble
<>Guage

*Goal per Chart Type**
<>xxx

**Pros & Cons per Chart Type**
<>xxx

**Chart combination**
<>overlap
<><>xxx
<>next to
<><>xxx
  
**Put measures on a chart**
<>xxx



