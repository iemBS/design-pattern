Define Codable Software Action
Main Success Scenario:
  1. "Use Action & Object perspective"
  2. End
Alternatives:
  1a. Need a perspective based only on actions
    1a1. "Use Create, Change, Destroy perspective"
    1a2. go to step 2


Use Action & Object perspective
Note:
  -Actions always involves an object
  -At least one object is being acted upon in code at all times.
  -If an action is not done on one object, an action is done on a different object.
Main Success Scenario:
  1. "Create Object"
  2. End
Alternatives:
  1a. Change already existing object in some way
    1a1. "Change Object
    1a2. go to step 2
  1b. Change object's relationship with its environment
    1b1. "Move Object"
    1b2. go to step 2
 1c. Destory object
   1c1. "Destory Object"
   1c2. go to step 2


Create Object
Main Success Scenario:
  1. xxx:fill in 


Change Object
Note:
  -Change Object relation to its environment
Main Success Scenario:
  1. xxx:fill in 


Move Object
Main Success Scenario:
  1. xxx:fill in 


Destroy Object
Main Success Scenario:
  1. xxx:fill in 


Use Create, Change, Destroy perspective
Main Success Scenario:
  1. "Create"
  2. End
Alternatives:
  1a. Need to perform a change action
    1a1. "Change"
    1a2. go to step 2
  1b. Need to perform a destroy action
   1b1. "Destroy"
   1b2. go to step 2
  1c. Need to perform an action that is not one of the other three
    1c1. "Unknown"
    1c2. go to step 2


Create
Main Success Scenario:
  1. "Create Thread"
  2. End
Alternatives:
  1a. 
    1a1. "Create Structure"
    1a2. go to step 2
 1b. 
    1b1. "Create Connection"
    1b2. go to step 2
 1c.
    1c1. "Create Test"


Change
Note:
-Change Data Type
-Change Data Value 
-Change Data Value Format
-Change Data Structure
  -Create Folder
  -Destroy Folder
  -Move File
-Move Data
  -Open File
  -Read File
  -Write File
Main Success Scenario:
  1. xxx:fill in 


Destroy
Note:
-Destroy Data Value
 -TODO
Main Success Scenario:
  1. xxx:fill in 
 

Unknown
Note:
-Analyze Data
 -Apply Machine Learning 
Main Success Scenario:
  1. xxx:fill in 

** ABOVE THIS ARE THE PERSPECTIVES & BELOW THIS THE ACTIONS **

Create Search
Main Success Scenario:
  1. "Search Collection"
  2. return search results
  3. End
Alternatives:
  1a. 
    1a1. "Search File"
    1a2. go to step 2
  1b.
    1b1. "Search Folder"
    1b2. go to step 2
  1c. 
    1c1. xxx:fill in 



Change Data Value 
Pre-Condition:
  -"Create Data Value"
Main Success Scenario:
  1. xxx:fill in 


Create Data Format
Note:
  -ref @
    -https://en.wikipedia.org/wiki/Data_format
Main Success Scenario
  1. "Create Data Type"
  2. End
Alternatives:
  1a. Need to create a file format
    1a1. "Create File Format"
    1a2. go to step 2
  1b. Need to change value to a specific format without changing the data type
    1b1. "Change Data Value Format"
    1b2. go to step 2
    

Create Data Value Format
Main Success Scenario:
  1. xxx:fill in 


Create File Format
Note:
  -ref @
    -https://en.wikipedia.org/wiki/File_format
    -https://en.wikipedia.org/wiki/List_of_file_formats
  -7z
  -CSV
  -GZIP
  -HTML
  -JSON
  -ORC
  -Parquet
  -PNG
  -TSV
  -TXT
    -alt file extension with same format: LOG
  -XLSX
  -ZIP
  -xxx
Main Success Scenario:
  1. Define file structure
  2. xxx:fill in 


Change Data Value Format
Pre-Condition:
  -"Create Data Value"
Main Success Scenario:
  1. xxx:fill in 


Create Structure
Main Success Scenario:
  1. "Create Collection"
  2. End
Alternatives:
  1a. Define types of data values
    1a1. "Create Data Type"
    1a2. go to step 2
  1b. 
    1b1. "Create File"
    1b1. go to step 2



Change Structure
Pre-Condition:
  -"Create Structure"
Main Success Scenario:
  1. xxx:fill in 


Destroy Structure
Pre-Condition:
  -"Create Structure"
Main Success Scenario:
  1. xxx:fill in 


Create Connection Type
Main Success Scenario:
  1. xxx:fill in 


Create Thread
Note:
  -https://realpython.com/intro-to-python-threading/
Main Success Scenario:
  1. xxx:fill in 


Destroy Thread
Note:
  -https://realpython.com/intro-to-python-threading/
Main Success Scenario:
  1. xxx:fill in 


Create Connection
Pre-Condition:
  -"Create Connection Type"
Main Success Scenario:
  1. xxx:fill in 


Move Data
Main Success Scenario:
  1. "Read File"
  2. End
Alternatives:
  1a. 
    1a1. "Write File"


Create Collection Type
Pre-Condition:
  -"Create Data Type"
Main Success Scenario:
  1. xxx:fill in 


Create Collection
Pre-Condition:
  -"Create Data Value"
  -"Create Collection Type"
Main Success Scenario:
  1. xxx:fill in 


Read Collection Element
Main Success Scenario:
  1. xxx:fill in 


Search Collection
Main Success Scenario:
  1. Start "Iterate Collection"
  2. Per iteration, "Read Collection Element"
  3. Per iteration, "Test Data Value Equality"
  4. "Create Test Results"


Change Collection
Pre-Condition:
  -"Create Collection"
Main Success Scenario:
  1. xxx:fill in 


Create Data Type
Main Success Scenario:
  1. xxx:fill in 


Create Data Value
Pre-Condition:
  -"Create Data Type"
Main Success Scenario:
  1. Choose character set
  2. xxx:fill in 


Change Data Value
Pre-Condition:
  -"Create Data Value"
Main Success Scenario:
  1. xxx:fill in 
  2. End
Alternatives:
  1a. Change not allowed by chosen character set
    1a1. Create Character Set Error
    1a2. go to step 1
  1b. Change not allowed by chosen data type
    1b1. Create Data Type Error
    1b2. go to step 2


Destroy Data Value
Pre-Condition:
  -"Create Data Value"
Main Success Scenario:
  1. xxx:fill in 


Change Data Type
Pre-Condition:
  -"Create Data Type"
  -"Create Data Value"
Main Success Scenario:
  1. xxx:fill in 


Create Folder 
Main Success Scenario:
  1. xxx:fill in 


Create File 
Pre-Condition:
  -"Create Folder"
  -"Create File Format"
Main Success Scenario:
  1. xxx:fill in 


Change File 
Pre-Condition:
  -"Create File"
Main Success Scenario:
  1. xxx:fill in 


Move File
Pre-Condition:
  -"Create File"
Main Success Scenario:
  1. xxx:fill in 


Open Connection
Pre-Condition:
  -"Create Connection"
Main Success Scenario:
  1. xxx:fill in 


Close Connection
Pre-Condition:
  -"Open Connection"
Main Success Scenario:
  1. xxx:fill in 


Open File 
Pre-Condition:
  -"Open Connection"
  -"Create File"
Post-Condition:
  -"Close Connection"
Main Success Scenario:
  1. xxx:fill in 


Destroy Connection
Pre-Condition:
  -"Close Connection"
Main Success Scenario:
  1. xxx:fill in 


Write File 
Pre-Condition:
  -"Open File"
Main Success Scenario:
  1. xxx:fill in 


Read File
Pre-Condition:
  -"Open File"
Main Success Scenario:
  1. xxx:fill in 


Destroy File 
Pre-Condition:
  -"Create File"
Main Success Scenario:
  1. xxx:fill in 


Iterate Collection
Pre-Condition:
  -"Create Collection"
Main Success Scenario:
  1. xxx:fill in 


Create Test
Note:
  -Tests are based on a degree of equality
  -Tests will be done on an object, collection of objects, or collection needs to be iterated so tests can be one on each object in the collection
  -Testing a collection or the items in a collection, depends on the tests required, limits of the objects and collections, and environment resources
Pre-Condition:
  -"Create Comparison Type"
Main Success Scenario:
  1. "Test Object Resource Limits"
  2. End 
Alternatives:
  1a. 
    1a1. "Test Action Resource Limits"
  1b. 
    1b1. "Test Object Performance Limits"
  1c. 
    1c1. "Test Action Performance Limits"
  1d. 
    1d1. xxx:fill in 
  1x.
    1x1. "Test Unexpected"
    1x2. go to step 2


Apply Test
Pre-Condition:
  -"Create Test"
Main Success Scenario:
  1. xxx:fill in 
  2. "Create Test Results"
  3. End


Create Test Results
Main Success Scenario:
  1. xxx:fill in 


Create Comparison Type
Main Success Scenario:
  1. "Create Simple Comparison Type"
  2. End
Alternatives:
  1a. 
    1a1. "Create Complex Comparison Type"
    1a2. go to step 2


Create Simple Comparison Type
Note:
  -Uses a simple comparison like equality
  -equal
  -equal w letter case ignored
  -equal w negation ignored
Main Success Scenario:
  1. "Create Simple Data Value Comparison Type"
  2. End
Alternatives:
  1a. 
    1a1. "Create Simple Collection Comparison Type"
    1a2. go to step 2


Create Simple Data Value Comparison Type
Main Success Scenario:
  1. xxx:fill in 


Create Simple Collection Comparison Type
Main Success Scenario:
  1. xxx:fill in 


Create Complex Comparison Type
Note:
  -Allows variance in equality or a requires series of steps 
Main Success Scenario:
  1. xxx:fill in 


Create Complex Data Value Comparison Type
Main Success Scenario:
  1. xxx:fill in 


Create Complex Collection Comparison Type
Main Success Scenario:
  1. xxx:fill in 


Create Complex Comparison Target
Main Success Scenario:
  1. "Create Pattern"
  2. End
Alternatives:
  1a. 
    1a1. "Create Algorithm"
    1a2. go to step 2


Create Test Pattern
Main Success Scenario:
  1. xxx:fill in 


Create Test Algorithm
Main Success Scenario:
  1. xxx:fill in 


Test Data Value Equality
Main Success Scenario:
  1. xxx:fill in 


Test Unexpected
Main Success Scenario:
  1. xxx:fill in 
